resources:
  - name: app_repo
    type: GitRepo
    configuration:
      gitProvider: my_github3                      # <-- replace with your integration
      path: SaarMJFrogCloudOps/Academy    # <-- replace with your repository name
      branches:
        include: main
      buildOn:
        commit: true

  - name: app_image
    type: Image
    configuration:
      registry: saartifactory                              # <-- replace with your artifactory integration
      sourceRepository: docker_local               # <-- required if registry is Artifactory
      imageName: saar-docker.jfrog.io/docker-local/webapp  # < -- replace with your image path and name
      imageTag: latest
      autoPull: true
      
  - name: app_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: saartifactory
      buildName: app_build
      buildNumber: 1   

  - name: scanned_app_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: saartifactory
      buildName: scanned_app_build
      buildNumber: 1 

  - name: app_promoted_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: saartifactory
      buildName: app_build
      buildNumber: 1
    
  - name: app_helm_chart
    type: HelmChart
    configuration:
      sourceArtifactory: saartifactory 
      repository: helm-local
      chart: app
      version: "1.0"   

pipelines:
  - name: pipeline_app
    steps:
      - name: docker_build
        type: DockerBuild
        configuration:
          affinityGroup: app_group
          dockerFileLocation: Application/
          dockerFileName: Dockerfile
          dockerImageName: saar-docker.jfrog.io/docker-local/webapp  # replace with your image path and name
          dockerImageTag: ${run_number}
          inputResources:
            - name: app_repo
          integrations:
            - name: saartifactory                           # <-- replace with your artifactory integration

      - name: docker_push
        type: DockerPush
        configuration:
          affinityGroup: app_group
          targetRepository: docker-local
          integrations:
            - name: saartifactory                            # <-- replace with your artifactory integration
          inputSteps:
            - name: docker_build
          outputResources:
            - name: app_image
          # forceXrayScan: true
          # failOnScan: false
          # autoPublishBuildInfo: true

      - name: publish_app_build
        type: PublishBuildInfo
        configuration:
          affinityGroup: app_group
          inputSteps:
            - name: docker_push
          outputResources:
            - name: app_build_info

      - name: scan
        type: XrayScan
        configuration:
          affinityGroup: app_group
          failOnScan: false
          inputResources:
            - name: app_build_info
              trigger: false
          outputResources:
            - name: scanned_app_build_info


      - name: promote_app_build
        type: PromoteBuild
        configuration:
          affinityGroup: app_group
          targetRepository: docker-local
          integrations:
            - name: saartifactory
          inputResources:
            - name: app_build_info
          outputResources:
            - name: app_promoted_build_info
      
      - name: app_helm_publish_main
        type: HelmPublish
        configuration:
          affinityGroup: app_group
          helmVersion: 3
          chartPath: Application/app         
          inputResources:
            - name: app_repo
          outputResources:
            - name: app_helm_chart
        execution:
          onStart:
            - export HELM_VERSION="3.4.1"
            - set -x
            - curl -LO "https://get.helm.sh/helm-v$HELM_VERSION-linux-amd64.tar.gz"
            - mkdir -p "/usr/local/helm-v$HELM_VERSION"
            - tar -xzf "helm-v$HELM_VERSION-linux-amd64.tar.gz" -C "/usr/local/helm-v$HELM_VERSION"
            - ln -sf "/usr/local/helm-v$HELM_VERSION/linux-amd64/helm" /usr/local/bin/helm 
            - ln -sf "/usr/local/helm-v$HELM_VERSION/linux-amd64/helm" /usr/local/bin/helm3
            - rm -f "helm-v$HELM_VERSION-linux-amd64.tar.gz"
      
      - name: app_helm_deploy_test
        type: HelmDeploy
        configuration:
          affinityGroup: app_group
          helmVersion: 3 
          flags: --namespace test
          releaseName: app-test
          integrations:
            - name: gce 
            - name: gke
          inputResources:
            - name: app_helm_chart
        execution:
          onStart:
            - export HELM_VERSION="3.4.1"
            - set -x
            - curl -LO "https://get.helm.sh/helm-v$HELM_VERSION-linux-amd64.tar.gz"
            - mkdir -p "/usr/local/helm-v$HELM_VERSION"
            - tar -xzf "helm-v$HELM_VERSION-linux-amd64.tar.gz" -C "/usr/local/helm-v$HELM_VERSION"
            - ln -sf "/usr/local/helm-v$HELM_VERSION/linux-amd64/helm" /usr/local/bin/helm 
            - ln -sf "/usr/local/helm-v$HELM_VERSION/linux-amd64/helm" /usr/local/bin/helm3
            - rm -f "helm-v$HELM_VERSION-linux-amd64.tar.gz"
          onExecute:
            - gcloud container clusters get-credentials "coa" --region=europe-west3