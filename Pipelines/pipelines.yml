resources:
  - name: app_{{gitBranch}}_repo
    type: GitRepo
    configuration:
      gitProvider: my_github3       
      path: SaarMJFrogCloudOps/Academy 
      branches:
        include: ^{{gitBranch}}$
      buildOn:
        commit: true

  - name: webapp_{{gitBranch}}_image
    type: Image
    configuration:
      registry: saartifactory 
      sourceRepository: docker-local
      imageName: saar-docker.jfrog.io/webapp-{{gitBranch}} 
      imageTag: latest
      autoPull: true
      
  - name: app_{{gitBranch}}_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: saartifactory
      buildName: app_{{gitBranch}}_build
      buildNumber: 1   

  - name: scanned_app_{{gitBranch}}_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: saartifactory
      buildName: scanned_app_{{gitBranch}}_build
      buildNumber: 1 

  - name: app_{{gitBranch}}_promoted_build_info
    type: BuildInfo
    configuration:
      sourceArtifactory: saartifactory
      buildName: app_{{gitBranch}}_build
      buildNumber: 1
    
  - name: app_{{gitBranch}}_helm_chart
    type: HelmChart
    configuration:
      sourceArtifactory: saartifactory 
      repository: helm-local
      chart: app
      version: "0.1.6"   

pipelines:
  - name: pipeline_app_{{gitBranch}}
    steps:
      - name: docker_build
        type: DockerBuild
        configuration:
          affinityGroup: app_{{gitBranch}}_group
          dockerFileLocation: Application/
          dockerFileName: Dockerfile
          dockerImageName: saar-docker.jfrog.io/webapp-{{gitBranch}} 
          dockerImageTag: ${run_number}
          inputResources:
            - name: app_{{gitBranch}}_repo
          integrations:
            - name: saartifactory 
        execution:
          onStart:
            - update_commit_status app_{{gitBranch}}_repo --message "starting..." --context "$step_name"
          onFailure:
            - update_commit_status app_{{gitBranch}}_repo --message "Failed" --context "$step_name"
          onSuccess:
            - update_commit_status app_{{gitBranch}}_repo --message "Succeeded" --context "$step_name"

      - name: docker_push
        type: DockerPush
        configuration:
          affinityGroup: app_{{gitBranch}}_group
          targetRepository: docker-local
          integrations:
            - name: saartifactory  
          inputSteps:
            - name: docker_build
          inputResources:
            - name: app_{{gitBranch}}_repo
          outputResources:
            - name: webapp_{{gitBranch}}_image
        execution:
          onStart:
            - update_commit_status app_{{gitBranch}}_repo --message "starting..." --context "$step_name"
          onFailure:
            - update_commit_status app_{{gitBranch}}_repo --message "Failed" --context "$step_name"
          onSuccess:
            - update_commit_status app_{{gitBranch}}_repo --message "Succeeded" --context "$step_name"

      - name: publish_app_{{gitBranch}}_build
        type: PublishBuildInfo
        configuration:
          affinityGroup: app_{{gitBranch}}_group
          inputSteps:
            - name: docker_push
          outputResources:
            - name: app_{{gitBranch}}_build_info

      - name: scan
        type: XrayScan
        configuration:
          affinityGroup: app_{{gitBranch}}_group
          failOnScan: false
          inputResources:
            - name: app_{{gitBranch}}_build_info
              trigger: false
            - name: app_{{gitBranch}}_repo
          outputResources:
            - name: scanned_app_{{gitBranch}}_build_info
        execution:
          onStart:
            - update_commit_status app_{{gitBranch}}_repo --message "starting..." --context "$step_name"
          onFailure:
            - update_commit_status app_{{gitBranch}}_repo --message "Failed" --context "$step_name"
          onSuccess:
            - update_commit_status app_{{gitBranch}}_repo --message "Succeeded" --context "$step_name"

      - name: promote_app_{{gitBranch}}_build
        type: PromoteBuild
        configuration:
          affinityGroup: app_{{gitBranch}}_group
          targetRepository: docker-local
          integrations:
            - name: saartifactory
          inputResources:
            - name: app_{{gitBranch}}_build_info
            - name: app_{{gitBranch}}_repo
          outputResources:
            - name: app_{{gitBranch}}_promoted_build_info
        execution:
          onStart:
            - update_commit_status app_{{gitBranch}}_repo --message "starting..." --context "$step_name"
          onFailure:
            - update_commit_status app_{{gitBranch}}_repo --message "Failed" --context "$step_name"
          onSuccess:
            - update_commit_status app_{{gitBranch}}_repo --message "Succeeded" --context "$step_name"
      
      - name: app_{{gitBranch}}_helm_publish_main
        type: HelmPublish
        configuration:
          affinityGroup: app_{{gitBranch}}_group
          helmVersion: 3
          chartPath: Application/app         
          inputResources:
            - name: app_{{gitBranch}}_repo
          outputResources:
            - name: app_{{gitBranch}}_helm_chart
        execution:
          onStart:
            - chmod 775 dependencyState/resources/app_{{gitBranch}}_repo/Pipelines/helminit.sh
            - dependencyState/resources/app_{{gitBranch}}_repo/Pipelines/helminit.sh
            - add_run_files dependencyState/resources/app_{{gitBranch}}_repo/Pipelines/helminit.sh helminit        
            - update_commit_status app_{{gitBranch}}_repo --message "starting..." --context "$step_name"
          onFailure:
            - update_commit_status app_{{gitBranch}}_repo --message "Failed" --context "$step_name"
          onSuccess:
            - update_commit_status app_{{gitBranch}}_repo --message "Succeeded" --context "$step_name"
  
      - name: app_{{gitBranch}}_helm_deploy
        type: HelmDeploy
        configuration:
          affinityGroup: app_{{gitBranch}}_group
          helmVersion: 3 
          flags: --namespace {{gitBranch}} --set image.tag="$IMAGE_TAG_FLAG" --set "$REPOSITORY_FLAG"
          releaseName: app-{{gitBranch}}
          valueFilePaths: 
            - Application/app/values.yaml
          integrations:
            - name: gce 
            - name: gke
          inputResources:
            - name: app_{{gitBranch}}_helm_chart
            - name: webapp_{{gitBranch}}_image
        execution:
          onStart:
            - restore_run_files helminit ./helminit.sh
            - apt install tree
            - tree 
            - export gitBranchName={{gitBranch}}
            - export REPOSITORY_FLAG="Values.image.repository=saar-docker.jfrog.io/webapp-$gitBranchName"
            - export imageTagVariableName=res_webapp_{{gitBranch}}_image_imageTag
            - IMAGE_TAG_FLAG=$docker_build_dockerImageTag
            - set -x
            - ./helminit.sh
            - gcloud container clusters get-credentials "coa" --region=europe-west3


